AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  project_flask

  Sample SAM Template for project_flask



# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 10

Parameters:
  EXECENV:
    Type: String
    Default: prod
  AWSDYNAMODBTABLENAME:
    Type: String
    Default: photos-table
  AWSS3BUCKET:
    Type: String
    Default: "photos-table"
  AWSREGION:
    Type: String
    Default: eu-central-1
  AWSCOGNITOPNAME:
    Type: String
    Default: "UserPoolFlaskDev"
  AWSCOGNITOCNAME:
    Type: String
    Default: "UserPoolClientPhotoAppDev"
  AWSCOGNITOPOOLID:
    Type: String
    Default: "AWSCOGNITOPOOLID"
  AWSCOGNITOCLIENTID:
    Type: String
    Default: "AWSCOGNITOCLIENTID"
  AWSCOGNITOCLIENTSECRET:
    Type: String
    Default: "AWSCOGNITOCLIENTSECRET"
  AWSCOGNITODOMAIN:
    Type: String
    Default: "userpool-test-01.eu-central-1.amazoncognito.com"
  BASEURL:
    Type: String
    Default: "https://1saan8kf9j.execute-api.eu-central-1.amazonaws.com/prod"

Resources:
  DynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: !Ref AWSDYNAMODBTABLENAME
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
          - AttributeName: title
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
          - AttributeName: title
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
  
  UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
          AdminCreateUserConfig:
           AllowAdminCreateUserOnly: false
          UserPoolName: !Ref AWSCOGNITOPNAME
          UsernameAttributes:
          - email
          AutoVerifiedAttributes:
          - email
          Policies:
            PasswordPolicy:
                MinimumLength: 6
                RequireLowercase: true
                RequireNumbers: false
                RequireSymbols: false
                RequireUppercase: true
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      GenerateSecret: true
      ExplicitAuthFlows:
        - USER_PASSWORD_AUTH
      AllowedOAuthFlows:
        - code
      CallbackURLs: 
        - !Sub "https://${ServiceApi}.execute-api.${AWSREGION}.amazonaws.com/${EXECENV}/auth/callback"
      LogoutURLs: 
        - !Sub "https://${ServiceApi}.execute-api.${AWSREGION}.amazonaws.com/${EXECENV}"
      AllowedOAuthScopes:
        - openid
        - email
        - profile

  ServiceApi:
    DependsOn: UserPool
    Type: AWS::Serverless::Api
    Properties:
      Name: ServiceApi
      StageName: !Ref EXECENV
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
      Auth:
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt "UserPool.Arn"


  UserPoolTestDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref UserPool
      Domain: 'userpool-test-01'
    
   
  LambdaFunction:
     Type: AWS::Serverless::Function
     Properties:
        Description: Handles the basic request
        CodeUri: photo_app/
        Handler: main.app
        Runtime: python3.8
        Environment:
          Variables:
            AWSREGION: !Ref AWSREGION
            EXECENV: !Ref EXECENV
            BASEURL: !Ref BASEURL
            AWSCOGNITOPOOLID: !Ref AWSCOGNITOPOOLID
            AWSCOGNITOCLIENTID: !Ref AWSCOGNITOCLIENTID
            AWSCOGNITOCLIENTSECRET: !Ref AWSCOGNITOCLIENTSECRET
            AWSDYNAMODBTABLENAME: !Ref AWSDYNAMODBTABLENAME
            AWSS3BUCKET: !Ref AWSS3BUCKET
            AWSCOGNITODOMAIN: !Ref AWSCOGNITODOMAIN
            SCRIPT_NAME: /prod
        Policies:
          - DynamoDBCrudPolicy:
              TableName: !Ref AWSDYNAMODBTABLENAME
          - S3CrudPolicy:
              BucketName: !Ref AWSS3BUCKET 
        Events:
          GetIndex:
            Type: Api
            Properties:
              Path: /{proxy+}
              RestApiId: !Ref ServiceApi
              Method: any


Outputs:
  UserPool:
    Description: "UserPool ID"
    Value: !Ref UserPool

  ServiceApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServiceApi}.execute-api.${AWSREGION}.amazonaws.com/${EXECENV}"

  UserPoolClient:
    Description: "UserPoolClient ID"
    Value: !Ref UserPoolClient

  
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api

